/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 public/models/human.gltf -t -r public 
*/
import * as THREE from 'three'
import React from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { MOCK_GARMENTS } from '../data/mockdata';

type GLTFResult = GLTF & {
  nodes: {
    Genesis9_1: THREE.Mesh
    Genesis9_2: THREE.Mesh
    Genesis9_3: THREE.Mesh
    Genesis9_4: THREE.Mesh
    Genesis9_5: THREE.Mesh
    Genesis9_6: THREE.Mesh
    Genesis9_7: THREE.Mesh
    Genesis9Tear: THREE.Mesh
    Genesis9Eyes_1: THREE.Mesh
    Genesis9Eyes_2: THREE.Mesh
    Genesis9Eyes_3: THREE.Mesh
    Genesis9Eyes_4: THREE.Mesh
  },
  materials: {
    Fingernails: THREE.MeshStandardMaterial
    Toenails: THREE.MeshStandardMaterial
    Legs: THREE.MeshStandardMaterial
    Mouth_Cavity: THREE.MeshStandardMaterial
    Arms: THREE.MeshStandardMaterial
    Head: THREE.MeshStandardMaterial
    Body: THREE.MeshStandardMaterial
    Tear: THREE.MeshStandardMaterial
    EyeMoisture_Left: THREE.MeshStandardMaterial
    EyeMoisture_Right: THREE.MeshStandardMaterial
    Eye_Left: THREE.MeshStandardMaterial
    Eye_Right: THREE.MeshStandardMaterial
  },
  scene: THREE.Group;
};

function Garment({ modelUrl }: { modelUrl: string }) {
  const gltf = useGLTF(modelUrl) as GLTFResult;
  return (
    <primitive object={gltf.scene} />
  );
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Human(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/models/human.gltf') as GLTFResult
  const garmentToDisplay = MOCK_GARMENTS[0]

  return (
    <group {...props} dispose={null}>
      <group position={[0, 116.341, 10.477]} rotation={[Math.PI / 2, 0, 0]}>
        <mesh geometry={nodes.Genesis9_1.geometry} material={materials.Fingernails} />
        <mesh geometry={nodes.Genesis9_2.geometry} material={materials.Toenails} />
        <mesh geometry={nodes.Genesis9_3.geometry} material={materials.Legs} />
        <mesh geometry={nodes.Genesis9_4.geometry} material={materials.Mouth_Cavity} />
        <mesh geometry={nodes.Genesis9_5.geometry} material={materials.Arms} />
        <mesh geometry={nodes.Genesis9_6.geometry} material={materials.Head} />
        <mesh geometry={nodes.Genesis9_7.geometry} material={materials.Body} />
      </group>
      <mesh geometry={nodes.Genesis9Tear.geometry} material={materials.Tear} position={[0, 116.341, 10.477]} rotation={[Math.PI / 2, 0, 0]} />
      <group position={[0, 116.341, 10.477]} rotation={[Math.PI / 2, 0, 0]}>
        <mesh geometry={nodes.Genesis9Eyes_1.geometry} material={materials.EyeMoisture_Left} />
        <mesh geometry={nodes.Genesis9Eyes_2.geometry} material={materials.EyeMoisture_Right} />
        <mesh geometry={nodes.Genesis9Eyes_3.geometry} material={materials.Eye_Left} />
        <mesh geometry={nodes.Genesis9Eyes_4.geometry} material={materials.Eye_Right} />
      </group>
      <Garment modelUrl={garmentToDisplay.modelUrl} />
    </group>
  )
}

useGLTF.preload('/models/human.gltf')
